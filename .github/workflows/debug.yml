# camille-sit722/.github/workflows/debug.yml
name: Stage 2 Debug 

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to deploy (branch/sha). Leave blank for default."
        required: false
        default: ""

env:
  # Keep in sync with your Stage 2
  SERVICES: "product-service-w10d2 order-service-w10d2 customer-service-w10d2 frontend"

jobs:
  stage2_debug:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}

      - name: Create debug namespace
        id: ns
        run: |
          NS="staging-debug-${{ github.run_id }}"
          echo "ns=$NS" >> "$GITHUB_OUTPUT"
          echo "Using namespace: $NS"
          kubectl create namespace "$NS"

      - name: Apply ConfigMaps & Secrets
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          kubectl apply -n "$NS" -f k8s/configmaps.yaml
          kubectl apply -n "$NS" -f k8s/secrets.yaml

      - name: Apply data plane (RabbitMQ + DBs)
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          kubectl apply -n "$NS" -f k8s/rabbitmq.yaml
          kubectl apply -n "$NS" -f k8s/product-db.yaml
          kubectl apply -n "$NS" -f k8s/order-db.yaml
          kubectl apply -n "$NS" -f k8s/customer-db.yaml

      - name: Apply services (Product/Order/Customer) & Frontend
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          kubectl apply -n "$NS" -f k8s/product-service.yaml
          kubectl apply -n "$NS" -f k8s/order-service.yaml
          kubectl apply -n "$NS" -f k8s/customer-service.yaml
          kubectl apply -n "$NS" -f k8s/frontend.yaml

      - name: Wait for DBs & RabbitMQ
        shell: bash
        run: |
          set -e
          NS="${{ steps.ns.outputs.ns }}"
          kubectl -n "$NS" rollout status deploy/product-db-deployment-w10d2 --timeout=180s
          kubectl -n "$NS" rollout status deploy/order-db-deployment-w10d2   --timeout=180s
          kubectl -n "$NS" rollout status deploy/customer-db-deployment-w10d2 --timeout=180s
          kubectl -n "$NS" rollout status deploy/rabbitmq-deployment-w10d2  --timeout=180s

      - name: Wait for services (with diagnostics on failure)
        shell: bash
        run: |
          set +e
          NS="${{ steps.ns.outputs.ns }}"
          FAIL=0

          wait_one () {
            local d="$1"
            echo "Waiting for $d ..."
            if ! kubectl -n "$NS" rollout status deploy/$d --timeout=240s; then
              echo "::warning::Rollout timed out for $d"
              FAIL=1
            fi
          }

          wait_one product-service-w10d2
          wait_one order-service-w10d2
          wait_one customer-service-w10d2
          wait_one frontend

          if [ "$FAIL" -ne 0 ]; then
            echo "=== BASIC LISTS ==="
            kubectl -n "$NS" get deploy -o wide
            kubectl -n "$NS" get pods -o wide
            kubectl -n "$NS" get svc -o wide

            echo "=== DESCRIBE DEPLOYMENTS ==="
            for d in product-service-w10d2 order-service-w10d2 customer-service-w10d2 frontend; do
              echo "----- deploy/$d -----"
              kubectl -n "$NS" describe deploy "$d" || true
              echo
            done

            echo "=== DESCRIBE PODS BY LABEL ==="
            for a in product-service order-service customer-service frontend; do
              echo "----- app=$a -----"
              kubectl -n "$NS" describe pod -l app="$a" || true
              echo
            done

            echo "=== POD LOGS (first pod per service) ==="
            declare -A C
            C[product-service-w10d2]=product-service-container
            C[order-service-w10d2]=order-service-container
            C[customer-service-w10d2]=customer-service-container
            C[frontend]=frontend-container

            for d in product-service-w10d2 order-service-w10d2 customer-service-w10d2 frontend; do
              APP="${d%-w10d2}"
              POD=$(kubectl -n "$NS" get pod -l app="$APP" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
              echo "----- logs for $d (pod: $POD) -----"
              if [ -n "$POD" ]; then
                kubectl -n "$NS" logs "$POD" -c "${C[$d]}" --tail=200 || true
              else
                echo "No pod found for $APP"
              fi
              echo
            done

            echo "=== RECENT EVENTS ==="
            kubectl -n "$NS" get events --sort-by=.lastTimestamp | tail -n 200 || true

            echo "::error::One or more deployments failed to roll out"
            exit 1
          fi

      - name: Smoke check (optional)
        run: |
          NS="${{ steps.ns.outputs.ns }}"
          kubectl -n "$NS" run smoke --rm -i --restart=Never --image=curlimages/curl:8.8.0 -- \
            sh -eu -c '
              check_200 () {
                url="$1"; name="$2";
                code=$(curl -fsS -o /dev/null -w "%{http_code}" "$url" || true)
                if [ "$code" != "200" ]; then
                  echo "[FAIL] $name: expected 200, got $code ($url)"
                  exit 1
                fi
                echo "[OK] $name -> 200"
              }
              check_200 http://product-service-w10d2:8000/health   "product-service /health"
              check_200 http://order-service-w10d2:8001/health     "order-service /health"
              check_200 http://customer-service-w10d2:8002/health  "customer-service /health"
            '

      - name: Keep namespace for investigation
        run: echo "Namespace kept ${{ steps.ns.outputs.ns }}"
